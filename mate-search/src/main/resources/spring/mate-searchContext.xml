<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://cxf.apache.org/core"
	xmlns:cxfCamel="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"		
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:sec="http://cxf.apache.org/configuration/security"
	xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
	  	  		
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://camel.apache.org/schema/spring
	http://camel.apache.org/schema/spring/camel-spring.xsd
	http://camel.apache.org/schema/cxf 
    http://camel.apache.org/schema/cxf/camel-cxf.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://cxf.apache.org/core 
    http://cxf.apache.org/schemas/core.xsd
    http://cxf.apache.org/jaxrs
	http://cxf.apache.org/schemas/jaxrs.xsd
	http://cxf.apache.org/jaxws 
	http://cxf.apache.org/schemas/jaxws.xsd
	http://cxf.apache.org/transports/http/configuration
    http://cxf.apache.org/schemas/configuration/http-conf.xsd
    http://www.springframework.org/schema/jee
    http://www.springframework.org/schema/jee/spring-jee-4.0.xsd    
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    
    
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
    
	<context:component-scan base-package="com.cocha.hotels.matesearch" annotation-config="true" />	
	<context:annotation-config />	  			
	
	<context:property-placeholder location="classpath:properties/application.properties"/>
		
	<!-- Tell CXF/JAX-RS where the Mate - REST service is defined -->			
	<cxfCamel:rsServer id="mateServer" address="/mate" loggingFeatureEnabled="true">
       <cxfCamel:serviceBeans>
           <bean class="com.cocha.hotels.matesearch.providers.services.MateService" />           
       </cxfCamel:serviceBeans>
   </cxfCamel:rsServer>	
	
	<!-- Tell CXF/JAX-RS where the REST service is defined -->			
	<cxfCamel:rsServer id="jaxRsServer" address="/ean" loggingFeatureEnabled="true">
       <cxfCamel:serviceBeans>
           <bean class="com.cocha.hotels.matesearch.providers.services.EanService" />
       </cxfCamel:serviceBeans>
   </cxfCamel:rsServer>
	
	<!-- Defined the client endpoint to create the cxf-rs consumer for EAN-->
  <cxfCamel:rsClient id="eanClient" address="${mate.provider.ean.address.xml}"
    serviceClass="com.cocha.hotels.matesearch.providers.services.EanClientService"
    loggingFeatureEnabled="true"/>
    
    <cxfCamel:rsServer id="jaxBookingServer" address="/booking" loggingFeatureEnabled="true">
       <cxfCamel:serviceBeans>
           <bean class="com.cocha.hotels.matesearch.providers.services.BookingService" />
       </cxfCamel:serviceBeans>
   </cxfCamel:rsServer>
   
   <!-- Defined the client endpoint to create the cxf-rs consumer for Booking-->
  <cxfCamel:rsClient id="bookingClient"	
	address="${mate.provider.booking.address.xml}"	
	serviceClass="com.cocha.hotels.matesearch.providers.services.BookingClientService"
	loggingFeatureEnabled="true" />

	
	
	<http-conf:conduit 	name="*distribution-xml.booking*.*"	
	  xmlns:sec="http://cxf.apache.org/configuration/security"
	  xmlns="http://cxf.apache.org/transports/http/configuration">
	  <authorization>
	     <sec:UserName>${mate.provider.booking.user}</sec:UserName>
	     <sec:Password>${mate.provider.booking.pass}</sec:Password>
	     <sec:AuthorizationType>Basic</sec:AuthorizationType>
	  </authorization>
	</http-conf:conduit>
	
        
    <cxfCamel:rsServer id="sabreServer" address="/sabre" loggingFeatureEnabled="true">
       <cxfCamel:serviceBeans>
           <bean class="com.cocha.hotels.matesearch.providers.services.SabreService" />
       </cxfCamel:serviceBeans>
   </cxfCamel:rsServer>
		
	<camel:camelContext id="camel" xmlns="http://camel.apache.org/schema/spring" trace="true">
		<camel:routeBuilder ref="mateRoute" />		
		<camel:routeBuilder ref="eanRoute" />
		<camel:routeBuilder ref="eanClientRoute" />
		<camel:routeBuilder ref="bookingRoute" />
		<camel:routeBuilder ref="bookingClientRoute" />
		<camel:routeBuilder ref="sabreRoute" />
		<camel:routeBuilder ref="sabreClientRoute" />
		<camel:routeBuilder ref="basicBeanRoute" />
		<camel:routeBuilder ref="fileLogRoute" />
		<camel:routeBuilder ref="bookingTransformerRoute" />
		<camel:routeBuilder ref="eanTransformaerRoute" />
		<camel:routeBuilder ref="sabreTransformerRoute" />
	</camel:camelContext>	
	
	<!-- Dozer Mapping -->
	<bean id="mapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>mapping/Booking-mapping.xml</value>
				<value>mapping/EAN-mapping.xml</value>
				<value>mapping/Sabre-mapping.xml</value>
			</list>
		</property>
	</bean>

	<!-- Dozer Configuration -->
	<bean id="dozerConverterLoader" class="org.apache.camel.converter.dozer.DozerTypeConverterLoader">
		<constructor-arg index="0" ref="camel" />
		<constructor-arg index="1" ref="mapper" />
	</bean>

	<!-- JPA configuration -->	
	<bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <property name="jtaDataSource" ref="dataSource" />
	    <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
	</bean>
	
	<jee:jndi-lookup id="dataSource" jndi-name="java:jboss/datasources/MYSQLDATASOURCE" />	

	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	    <property name="database" value="MYSQL" />
	    <property name="showSql" value="true" />
	    <property name="generateDdl" value="true" />
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	</bean>

	<!-- Transaction Manager -->
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<jpa:repositories base-package="com.cocha.hotels.matesearch.repositories" />
		
</beans>
